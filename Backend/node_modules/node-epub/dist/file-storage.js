"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var adm_zip_1 = __importDefault(require("adm-zip"));
var ZipFileStorage = /** @class */ (function () {
    function ZipFileStorage(fileNameOrRawData) {
        this.zip = new adm_zip_1.default(fileNameOrRawData);
    }
    ZipFileStorage.prototype.readAsText = function (fileName, encoding) {
        if (encoding === void 0) { encoding = 'utf-8'; }
        return this.zip.readAsText(fileName, encoding);
    };
    ZipFileStorage.prototype.readAsBuffer = function (fileName) {
        var buffer = this.zip.readFile(fileName);
        if (buffer === null) {
            throw new Error("Failed to access \"" + fileName + "\" in zip archive.");
        }
        return buffer;
    };
    return ZipFileStorage;
}());
exports.ZipFileStorage = ZipFileStorage;
var DirectoryFileStorage = /** @class */ (function () {
    function DirectoryFileStorage(directoryPath) {
        this.rootDirectory = directoryPath;
    }
    DirectoryFileStorage.prototype.readAsText = function (fileName, encoding) {
        if (encoding === void 0) { encoding = 'utf-8'; }
        var filePath = path_1.default.join(this.rootDirectory, fileName);
        return fs_1.default.readFileSync(filePath, { encoding: encoding });
    };
    DirectoryFileStorage.prototype.readAsBuffer = function (fileName) {
        var filePath = path_1.default.join(this.rootDirectory, fileName);
        return fs_1.default.readFileSync(filePath);
    };
    return DirectoryFileStorage;
}());
exports.DirectoryFileStorage = DirectoryFileStorage;
