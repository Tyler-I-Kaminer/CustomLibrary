"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var camelcase_keys_1 = __importDefault(require("camelcase-keys"));
var file_storage_1 = require("./file-storage");
var opf_1 = require("./opf");
var findTagMeta = function (meta, id) {
    return meta && meta instanceof Array
        ? meta.find(function (item) { return item.refines === "#" + id; })
        : {};
};
var ensureArray = function (obj) { return (obj instanceof Array ? obj : [obj]); };
var findCoverImageId = function (meta) {
    var _a;
    if (!meta) {
        return 'cover';
    }
    var metaArray = ensureArray(meta);
    var coverImageObject = metaArray.find(function (item) { return item.name === 'cover'; });
    return ((_a = coverImageObject) === null || _a === void 0 ? void 0 : _a.content) || 'cover';
};
var Book = /** @class */ (function () {
    function Book(epubPathOrBuffer) {
        var isString = typeof epubPathOrBuffer === 'string';
        this.isZipFile = !isString || !fs_1.default.lstatSync(epubPathOrBuffer).isDirectory();
        if (this.isZipFile) {
            this.files = new file_storage_1.ZipFileStorage(epubPathOrBuffer);
        }
        else {
            this.files = new file_storage_1.DirectoryFileStorage(epubPathOrBuffer);
        }
        var opfFilePath = opf_1.findOpfFile(this.files);
        this.basePath = path_1.default.dirname(opfFilePath);
        var opf = opf_1.parseOpfFile(opfFilePath, this.files);
        var manifest = opf.manifest.item;
        var _a = opf.metadata, title = _a.title, creator = _a.creator, meta = _a.meta, language = _a.language, identifier = _a.identifier;
        // Title
        this.title = typeof title === 'object' ? title.text : title;
        // Creator
        this.creator = ensureArray(creator).map(function (item) { return (__assign(__assign({}, item), { meta: findTagMeta(meta, item.id) })); });
        // Language
        this.language = ensureArray(language);
        // Identifier
        this.identifier = identifier;
        // Cover image
        var coverImageId = findCoverImageId(meta);
        if (coverImageId) {
            var coverImage = manifest.find(function (item) { return item.id === coverImageId; });
            if (coverImage) {
                this.coverImage = camelcase_keys_1.default(coverImage);
            }
        }
    }
    Book.prototype.readAsText = function (fileName, encoding) {
        var filePath = path_1.default.join(this.basePath, fileName);
        return this.files.readAsText(filePath, encoding);
    };
    Book.prototype.readAsBuffer = function (fileName) {
        var filePath = path_1.default.join(this.basePath, fileName);
        return this.files.readAsBuffer(filePath);
    };
    return Book;
}());
exports.default = Book;
